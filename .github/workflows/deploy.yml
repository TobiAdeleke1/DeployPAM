name: Deploy to Droplet (Build frontend in CI, Caddy serves static)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra 
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # Build Frontend, copy to app/frontend_dist/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build Frontend (vite)
        working-directory: app/frontend
        run: |
          npm ci
          npm run build
          mkdir -p ../frontend_dist
          cp -R dist/* ../frontend_dist/
      
      # Terraform deploy
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4
        
      - name: Configure SSH Key for Digital Ocean
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Write secret variables to environment folder
        working-directory: ./infra
        run: |
          set -euo pipefail
          jq -n \
           --arg do_token "${{ secrets.DO_TOKEN }}" \
           --arg ssh_public_key "${{ secrets.SSH_PUBLIC_KEY }}" \
           --arg ssh_private_key "${{ secrets.SSH_PRIVATE_KEY }}" \
           '{
            "do_token": $do_token,
            "ssh_public_key": $ssh_public_key,
            "ssh_private_key": $ssh_private_key
           }' > environments.auto.tfvars.json
         
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
      
      # Initialize a new or existing Terraform working directory
      - name: Terraform Init
        run: terraform init
      
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        env:
          TF_VAR_project_name: ${{ vars.PROJECT_NAME || 'pam'}}
          TF_VAR_env: ${{ vars.ENV || 'prod'}}
          TF_VAR_region: ${{ vars.REGION || 'lon1'}}
          TF_VAR_app_port: ${{ vars.APP_PORT || '80'}}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_project_name: ${{ vars.PROJECT_NAME || 'pam'}}
          TF_VAR_env: ${{ vars.ENV || 'prod'}}
          TF_VAR_region: ${{ vars.REGION || 'lon1'}}
          TF_VAR_app_port: ${{ vars.APP_PORT || '80'}}
          TF_VAR_compose_env: >-
            {
              "DJANGO_SECRET_KEY": "${{ secrets.DJANGO_SECRET_KEY}}",
              "DJANGO_ALLOWED_HOSTS": "${{ vars.DJANGO_ALLOWED_HOSTS || 'localhost 127.0.0.1'}}",
              "DEBUG": "False"
            }
        run: terraform apply -auto-approve tfplan